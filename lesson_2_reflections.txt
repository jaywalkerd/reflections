-What happens when you initialize a repository? Why do you need to do it?

It allows git to install the necessary files in a hidden directory (.git/) to make your project a repository and allow it to be uploaded to git and track commits.

-How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is different in that it gives you a clear indication of which file(s) you want to commit.

-How can you use the staging area to make sure you have one commit per logical change?

You make sure you include all the changed files in the commit that involves your one logical change.

-What are some situations when branches would be helpful in keeping your history organized? How would branches help?

It would be helpful when you want to implement new features and want to give yourself a setpoint here you can easily revert to.  It also helps keep your repository organized.

-How do the diagrams help you visualize the branch structure?

You get a clear visualization of your branches, the commits within those branches, and if there are any unreachable commits.

-What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches combines the commits from both branches.  The order in which the commits appear is chronological.  The way it is represented in the diagram indicates each distinct branch and which commits belong to each branch.  Where as a merged branch gives no indication of which commits were originally from.

-What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Pros: Git will let you know if there are any conflicts that would prevent merging.
	  Git will automatically make a commit for you indicating a merge has taken place
	  
Cons: 